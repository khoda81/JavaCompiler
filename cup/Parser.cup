
import java.util.LinkedList;
import java.util.List;

import java_cup.runtime.ComplexSymbolFactory;
import lexer.Lexer;

parser code {:
    // Connect this parser to a scanner!
    Lexer scanner;
    
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex, sf);
    }
:}

terminal Integer    NUMBER;
terminal Float      FLOAT;
terminal String     STRING;
terminal String     IDENT;

terminal XOR, BITWISE_AND, BITWISE_OR, NOT, BITWISE_NOT, SHIFT_LEFT, SHIFT_RIGHT, UNSIGNED_SHIFT_RIGHT;
terminal PLUS, MINUS, TIMES, DIVIDE, MODULO, POWER, UMINUS;
terminal EQ, NE, LT, GT, LE, GE;
terminal AND, OR;
terminal SEMI, LPAREN, LCBRAC, RCBRAC, RPAREN, COMMA, ASSIGN;

terminal IF, ELSE, WHILE, FOR, FUNC, RETURN;
terminal TRUE, FALSE;

/* Non terminals */
non terminal Program stmtlist, block, else_block;
non terminal Statement stmt;
non terminal Expression expr;
non terminal List<Expression> exprlist, exprlist1;
non terminal BooleanExpression boolexpr;
non terminal List<String> idlist, idlist1;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;
precedence left POWER;
precedence left UMINUS;

precedence left EQ, NE, LT, GT, LE, GE;
precedence left AND, OR;

/* Grammar rules */
stmtlist  ::= stmtlist:sl stmt:s        {: if (s != null) sl.add(s); RESULT = sl; :}
            | /* empty */               {: RESULT = new Program(); :}
;

stmt  ::= IDENT:id ASSIGN expr:exp SEMI {: RESULT = new Statement.Assign(id, exp); :}
        | expr:exp SEMI                 {: RESULT = new Statement.ExpressionStatement(exp); :}

        | IF
          LPAREN boolexpr:e RPAREN
          block:b1 else_block:b2        {: RESULT = new Statement.If(e, b1, b2); :}

        | FUNC IDENT:id
          LPAREN idlist:il RPAREN
          block:b                       {: RESULT = new Statement.Function(id, il, b); :}

        | RETURN expr:e SEMI            {: RESULT = new Statement.Return(e); :}

        | WHILE LPAREN boolexpr:e RPAREN
          block:b                       {: RESULT = new Statement.While(e, b); :}
;

block ::= LCBRAC stmtlist:sl RCBRAC     {: RESULT = sl; :}
;

else_block    ::= ELSE block:b          {: RESULT = b; :}
                | /* empty */           {: RESULT = new Program(); :}
;

// list of expression seperated by commas
exprlist1 ::= exprlist1:el COMMA expr:e {: el.add(e); RESULT = el; :}
            | expr:e                    {: RESULT = new LinkedList<Expression>(); RESULT.add(e); :}
;

exprlist  ::= exprlist1:el              {: RESULT = el; :}
            | /* empty */               {: RESULT = new LinkedList<Expression>(); :}
;

idlist1   ::= idlist1:il COMMA IDENT:id {: il.add(id); RESULT = il; :}
            | IDENT:id                  {: RESULT = new LinkedList<String>(); RESULT.add(id); :}
;

idlist    ::= idlist1:il                {: RESULT = il; :}
            | /* empty */               {: RESULT = new LinkedList<String>(); :}
;

expr      ::= expr:e1 PLUS expr:e2      {: RESULT = new Expression.Add(e1, e2); :}
            | expr:e1 MINUS expr:e2     {: RESULT = new Expression.Sub(e1, e2); :}
            | expr:e1 TIMES expr:e2     {: RESULT = new Expression.Mul(e1, e2); :}
            | expr:e1 DIVIDE expr:e2    {: RESULT = new Expression.Div(e1, e2); :}
            | expr:e1 MODULO expr:e2    {: RESULT = new Expression.Mod(e1, e2); :}
            | expr:e1 POWER expr:e2     {: RESULT = new Expression.Pow(e1, e2); :}
	        | MINUS expr:e              {: RESULT = new Expression.UnaryMinus(e); :}
              %prec UMINUS

            | LPAREN expr:e RPAREN                  {: RESULT = e; :}
	        | NUMBER:val                            {: RESULT = new Expression.Number(val); :}
            | IDENT:id                              {: RESULT = new Expression.Ident(id); :}
            | IDENT:id LPAREN exprlist:el RPAREN    {: RESULT = new Expression.Call(id, el); :} // function call
;

boolexpr  ::= expr:e1 EQ expr:e2    {: RESULT = new BooleanExpression.Eq(e1, e2); :}
            | expr:e1 NE expr:e2    {: RESULT = new BooleanExpression.Ne(e1, e2); :}
            | expr:e1 LT expr:e2    {: RESULT = new BooleanExpression.Lt(e1, e2); :}
            | expr:e1 GT expr:e2    {: RESULT = new BooleanExpression.Gt(e1, e2); :}
            | expr:e1 LE expr:e2    {: RESULT = new BooleanExpression.Le(e1, e2); :}
            | expr:e1 GE expr:e2    {: RESULT = new BooleanExpression.Ge(e1, e2); :}

            | boolexpr:e1 AND boolexpr:e2   {: RESULT = new BooleanExpression.And(e1, e2); :}
            | boolexpr:e1 OR boolexpr:e2    {: RESULT = new BooleanExpression.Or(e1, e2); :}
            | TRUE                          {: RESULT = new BooleanExpression.True(); :}
            | FALSE                         {: RESULT = new BooleanExpression.False(); :}

            | expr:e1                       {: RESULT = new BooleanExpression.Expr(e1); :}
;